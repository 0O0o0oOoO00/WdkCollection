`**********************************************************************`
`* This is a template file for the tracewpp preprocessor.             *`
`* If you need to use a custom version of this file in your project,  *`
`* please clone it from this one and point WPP to it by specifying    *`
`* -gen:{yourfile}*.tmh on the RUN_WPP line in your sources file.     *`
`*                                                                    *`
`*    Copyright (c) Microsoft Corporation. All rights reserved.       *`
`**********************************************************************`
// Checksum="`Compiler.Checksum`" Generated file. Do not edit.
// File created by `Compiler.Name` compiler version `Compiler.Version`
// from template `TemplateFile`

// ***************************************************************************
// PREVIEW: Behavior of the -man option, the `TemplateFile` template, and the
// associated configuration options may change in future versions of tracewpp.
// ***************************************************************************

#pragma once

// Define the macros (if any) specified on the tracewpp command line.
// -- Begin macro definitions.
`FORALL def IN MacroDefinitions`
#define `def.Name` `def.Alias`
`ENDFOR`
// -- End macro definitions.

// This include file should be generated by running the MC.exe tool.
// For kernel-mode: mc.exe -km `Manifest.Arguments`
// For user-mode  : mc.exe -um `Manifest.Arguments`
#include "`Manifest.HeaderFileName`"

// If the manifest was compiled with -um, WPPMAN_KERNEL_MODE should be 0.
// If the manifest was compiled with -km, WPPMAN_KERNEL_MODE should be 1.
// If not set, try to auto-detect.
#if defined(WPPMAN_KERNEL_MODE)
// Use the existing definition.
#elif defined(McGenEventWriteKM_def) && !defined(McGenEventWriteUM_def)
#define WPPMAN_KERNEL_MODE 1
#elif defined(McGenEventWriteUM_def) && !defined(McGenEventWriteKM_def)
#define WPPMAN_KERNEL_MODE 0
#else
#error Unable to determine WPPMAN_KERNEL_MODE. Please define to 0 or 1.
#endif // WPPMAN_KERNEL_MODE

#ifndef WPPMAN_KERNEL_MODE_ACTIVITY
#define WPPMAN_KERNEL_MODE_ACTIVITY NULL
#endif // WPPMAN_KERNEL_MODE_ACTIVITY

`IF FOUND WPP_INIT_TRACING`
// User can define WPPMAN_NO_WPP_INIT_CLEANUP to suppress the generation of
// the WPP_INIT_TRACING and WPP_CLEANUP macros.
#ifndef WPPMAN_NO_WPP_INIT_CLEANUP
#define WPP_INIT_TRACING(DrvObj, RegPath) WPPMAN_INIT()
#define WPP_CLEANUP() WPPMAN_CLEANUP()
#endif // WPPMAN_NO_INIT_CLEANUP
`ENDIF FOUND WPP_INIT_TRACING`

#ifndef WPP_POST
#define WPP_POST()
#endif

#ifndef WPP_PRE
#define WPP_PRE()
#endif

#ifndef WPP_LOG_ALWAYS
#define WPP_LOG_ALWAYS(...)
#endif

#define WPPMAN_THIS_FILE `SourceFile.CanonicalName`

#define WPPMAN_EVAL(...) __VA_ARGS__
#define WPPMAN_(Id) WPPMAN_EVAL(WPPMAN_)##WPPMAN_EVAL(Id)##WPPMAN_EVAL(_)##WPPMAN_EVAL(WPPMAN_THIS_FILE)##WPPMAN_EVAL(__LINE__)

#define WPPMAN_INIT() \
	{ \
`FORALL ControlGuid IN ControlGuids`
`  FORALL TraceGuid IN ControlGuid.TraceGuids`
	EventRegister_`ControlGuid.Symbol``IF TraceGuid No`_`TraceGuid.No``ENDIF`(); \
`  ENDFOR TraceGuid`
`ENDFOR ControlGuid`
	}

#define WPPMAN_CLEANUP() \
	{ \
`FORALL ControlGuid IN ControlGuids`
`  FORALL TraceGuid IN ControlGuid.TraceGuids`
	EventUnregister_`ControlGuid.Symbol``IF TraceGuid No`_`TraceGuid.No``ENDIF`(); \
`  ENDFOR TraceGuid`
`ENDFOR ControlGuid`
	}

// Functions

`FORALL f IN Funcs WHERE !DoubleP && !MsgArgs`
#undef `f.Name`
#define `f.Name` WPPMAN_(CALL)
`ENDFOR`

`FORALL f IN Funcs WHERE DoubleP && !MsgArgs`
#undef `f.Name`
#define `f.Name`(ARGS) WPPMAN_(CALL) ARGS
`ENDFOR`

`FORALL f IN Funcs WHERE MsgArgs`
#undef `f.Name`
#define `f.Name`(`f.FixedArgs` MSGARGS) WPPMAN_(CALL)(`f.FixedArgs` MSGARGS)
`ENDFOR`

`FORALL r IN Reorder`
#undef  WPPMAN_R`r.Name`
#define WPPMAN_R`r.Name`(`r.Arguments`) `r.Permutation`
`ENDFOR`


// Messages

#ifdef WPPMAN_INVOKE_EVENTWRITE
// Use the existing definition.
#elif WPPMAN_KERNEL_MODE
#define WPPMAN_INVOKE_EVENTWRITE0(write)      write WPPMAN_EVAL((WPPMAN_KERNEL_MODE_ACTIVITY))
#define WPPMAN_INVOKE_EVENTWRITE1(write, ...) write WPPMAN_EVAL((WPPMAN_KERNEL_MODE_ACTIVITY, __VA_ARGS__))
#else
#define WPPMAN_INVOKE_EVENTWRITE0(write)      write WPPMAN_EVAL(())
#define WPPMAN_INVOKE_EVENTWRITE1(write, ...) write WPPMAN_EVAL((__VA_ARGS__))
#endif

`FORALL i IN Messages WHERE !MsgArgs`
// `i.Name`
#ifndef WPP`i.GooId`_PRE
#  define WPP`i.GooId`_PRE(`i.GooArgs`)
#endif
#ifndef WPP`i.GooId`_POST
#  define WPP`i.GooId`_POST(`i.GooArgs`)
#endif
#define WPPMAN_CALL_`i.Name`(`i.FixedArgs``i.MacroArgs`) \
    WPP_LOG_ALWAYS(WPP_EX`i.GooId`(`i.GooVals`),`i.DbgMacroArgs`) \
    WPP`i.GooId`_PRE(`i.GooVals`) \
    WPPMAN_INVOKE_EVENTWRITE`i.HasArgs`(`Manifest.Prefix``i.Name` `i.MacroExprs`) \
    WPP`i.GooId`_POST(`i.GooVals`)

`ENDFOR i IN Messages WHERE !MsgArgs`

`FORALL i IN Messages WHERE MsgArgs`
// `i.Name`
#ifndef WPP`i.GooId`_PRE
#  define WPP`i.GooId`_PRE(`i.GooArgs`)
#endif
#ifndef WPP`i.GooId`_POST
#  define WPP`i.GooId`_POST(`i.GooArgs`)
#endif
#define WPPMAN_CALL_`i.Name`(`i.FixedArgs` MSGARGS) \
    WPP_LOG_ALWAYS(WPP_EX`i.GooId`(`i.GooVals`), MSGARGS) \
    WPP`i.GooId`_PRE(`i.GooVals`) \
    WPPMAN_INVOKE_EVENTWRITE`i.HasArgs`(`Manifest.Prefix``i.Name` WPPMAN_R`i.ReorderSig` MSGARGS) \
    WPP`i.GooId`_POST(`i.GooVals`)

`ENDFOR i IN Messages WHERE MsgArgs`
